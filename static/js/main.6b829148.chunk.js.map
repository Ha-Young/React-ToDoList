{"version":3,"sources":["components/ToDoTemplate.js","components/ToDoContext.js","components/ToDoHead.js","components/ToDoItem.js","components/ToDoList.js","components/ToDoCreate.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplateBlock","styled","div","ToDoTemplate","children","initialToDos","id","text","done","toDoReducer","state","action","type","concat","todo","map","filter","Error","ToDoStateContext","createContext","ToDoDispatchContext","ToDoNextIdContext","ToDoProvider","useReducer","dispatch","nextId","useRef","Provider","value","useToDoState","context","useContext","useToDoDispatch","TodoHeadBlock","ToDoHead","tasksLeft","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","className","length","CheckCircle","props","css","Text","Remove","ToDoItemBlock","React","memo","onClick","TodoListBlock","ToDoList","todos","key","CircleButtton","button","open","InsertFormPositioner","InsertForm","Input","input","ToDoCreate","useState","setOpen","useToDoNextId","placeholder","autoFocus","onKeyPress","e","console","log","current","preventDefault","target","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6b829148.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n  width: 512px;\r\n  height: 768px;\r\n\r\n  position: relative;\r\n  background: white;\r\n  border-radius: 16px;\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.04);\r\n\r\n  margin: 0 auto;\r\n  margin-top: 64px;\r\n  margin-bottom: 64px;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nfunction ToDoTemplate({ children }) {\r\n  return <TodoTemplateBlock>{children}</TodoTemplateBlock>;\r\n}\r\n\r\nexport default ToDoTemplate;\r\n","import React, { useReducer, createContext, useContext, useRef } from 'react';\r\n\r\nconst initialToDos = [\r\n  {\r\n    id: 1,\r\n    text: '출근하기',\r\n    done: true,\r\n  },\r\n  {\r\n    id: 2,\r\n    text: '반차쓰기',\r\n    done: true,\r\n  },\r\n  {\r\n    id: 3,\r\n    text: '집에서 조금 쉬기',\r\n    done: true,\r\n  },\r\n  {\r\n    id: 4,\r\n    text: '카페에서 공부하기 (ToDoList 끝내기)',\r\n    done: false,\r\n  },\r\n  {\r\n    id: 5,\r\n    text: '밥 먹기',\r\n    done: false,\r\n  },\r\n  {\r\n    id: 6,\r\n    text: 'API 강의 듣기',\r\n    done: false,\r\n  },\r\n];\r\n\r\nfunction toDoReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'CREATE':\r\n      return state.concat(action.todo);\r\n\r\n    case 'TOGGLE':\r\n      return state.map((todo) =>\r\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo,\r\n      );\r\n\r\n    case 'REMOVE':\r\n      return state.filter((todo) => todo.id !== action.id);\r\n\r\n    default:\r\n      throw new Error(`Unhandled action... type : ${action.type}`);\r\n  }\r\n}\r\n\r\nconst ToDoStateContext = createContext();\r\nconst ToDoDispatchContext = createContext();\r\nconst ToDoNextIdContext = createContext();\r\n\r\nexport function ToDoProvider({ children }) {\r\n  const [state, dispatch] = useReducer(toDoReducer, initialToDos);\r\n  const nextId = useRef(7);\r\n\r\n  return (\r\n    <ToDoStateContext.Provider value={state}>\r\n      <ToDoDispatchContext.Provider value={dispatch}>\r\n        <ToDoNextIdContext.Provider value={nextId}>\r\n          {children}\r\n        </ToDoNextIdContext.Provider>\r\n      </ToDoDispatchContext.Provider>\r\n    </ToDoStateContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useToDoState() {\r\n  const context = useContext(ToDoStateContext);\r\n  if (!context) {\r\n    throw new Error('Cannot find ToDoStateContext Provider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useToDoDispatch() {\r\n  const context = useContext(ToDoDispatchContext);\r\n  if (!context) {\r\n    throw new Error('Cannot find ToDoDispatchContext Provider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useToDoNextId() {\r\n  const context = useContext(ToDoNextIdContext);\r\n  if (!context) {\r\n    throw new Error('Cannot find ToDoNextIdContext Provider');\r\n  }\r\n  return context;\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useToDoState } from './ToDoContext';\r\n\r\nconst TodoHeadBlock = styled.div`\r\n  padding: 32px 48px 32px 24px;\r\n  border-bottom: 1px solid #e9ecef;\r\n\r\n  h1 {\r\n    margin: 0;\r\n    font-size: 36px;\r\n    color: #343a40;\r\n  }\r\n\r\n  .day {\r\n    margin-top: 4px;\r\n    color: #868e96;\r\n    font-size: 21px;\r\n  }\r\n\r\n  .tasks-left {\r\n    color: #20c997;\r\n    font-size: 18px;\r\n    margin-top: 40px;\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nfunction ToDoHead() {\r\n  const todos = useToDoState();\r\n  const tasksLeft = todos.filter((todo) => !todo.done);\r\n\r\n  const today = new Date();\r\n  const dateString = today.toLocaleDateString('ko-KR', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n  });\r\n\r\n  const dayName = today.toLocaleDateString('ko-KR', {\r\n    weekday: 'long',\r\n  });\r\n\r\n  return (\r\n    <TodoHeadBlock>\r\n      <h1>{dateString}</h1>\r\n      <div className=\"day\">{dayName}</div>\r\n      <div className=\"tasks-left\">할 일 {tasksLeft.length}개 남음</div>\r\n    </TodoHeadBlock>\r\n  );\r\n}\r\n\r\nexport default ToDoHead;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdDone, MdDelete } from 'react-icons/md';\r\nimport { useToDoDispatch } from './ToDoContext';\r\n\r\nconst CheckCircle = styled.div`\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n  border: 1px solid #ced4da;\r\n  font-size: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 20px;\r\n  cursor: pointer;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      border: 1px solid #38d9a9;\r\n      color: #38d9a9;\r\n    `}\r\n`;\r\n\r\nconst Text = styled.div`\r\n  flex: 1;\r\n  font-size: 21px;\r\n  color: #495057;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      color: #ced4da;\r\n    `}\r\n`;\r\n\r\nconst Remove = styled.div`\r\n  opacity: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #dee2e6;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: #ff6b6b;\r\n  }\r\n`;\r\n\r\nconst ToDoItemBlock = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-top: 12px;\r\n  padding-bottom: 12px;\r\n\r\n  &:hover {\r\n    ${Remove} {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nfunction ToDoItem({ id, done, text }) {\r\n  const dispatch = useToDoDispatch();\r\n  const onToggle = () => {\r\n    return dispatch({\r\n      type: 'TOGGLE',\r\n      id,\r\n    });\r\n  };\r\n\r\n  const onRemove = () => {\r\n    return dispatch({\r\n      type: 'REMOVE',\r\n      id,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ToDoItemBlock>\r\n      <CheckCircle done={done} onClick={onToggle}>\r\n        {done && <MdDone />}\r\n      </CheckCircle>\r\n      <Text done={done}>{text}</Text>\r\n      <Remove onClick={onRemove}>\r\n        <MdDelete />\r\n      </Remove>\r\n    </ToDoItemBlock>\r\n  );\r\n}\r\n\r\nexport default React.memo(ToDoItem);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ToDoItem from './ToDoItem';\r\nimport { useToDoState } from './ToDoContext';\r\n\r\nconst TodoListBlock = styled.div`\r\n  flex: 1;\r\n  padding: 20px 32px;\r\n  padding-bottom: 48px;\r\n  overflow-y: auto;\r\n`;\r\n\r\nfunction ToDoList() {\r\n  const todos = useToDoState();\r\n\r\n  return (\r\n    <TodoListBlock>\r\n      {todos.map((todo) => (\r\n        <ToDoItem\r\n          key={todo.id}\r\n          id={todo.id}\r\n          text={todo.text}\r\n          done={todo.done}\r\n        />\r\n      ))}\r\n    </TodoListBlock>\r\n  );\r\n}\r\n\r\nexport default ToDoList;\r\n","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport { useToDoDispatch, useToDoNextId } from './ToDoContext';\r\n\r\nconst CircleButtton = styled.button`\r\n  background: #38d9a9;\r\n  &:hover {\r\n    background: #63e6be;\r\n  }\r\n  &:active {\r\n    background: #20c997;\r\n  }\r\n\r\n  z-index: 5;\r\n  cursor: pointer;\r\n  width: 80px;\r\n  height: 80px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: 0px;\r\n  transform: translate(-50%, 50%);\r\n\r\n  font-size: 60px;\r\n  color: white;\r\n  border-radius: 50%;\r\n\r\n  border: none;\r\n  outline: none;\r\n\r\n  transition: 0.125s all ease-in;\r\n  ${(props) =>\r\n    props.open &&\r\n    css`\r\n      background: #ff6b6b;\r\n      &:hover {\r\n        background: #ff8787;\r\n      }\r\n      &:active {\r\n        background: #fa5252;\r\n      }\r\n      transform: translate(-50%, 50%) rotate(45deg);\r\n    `}\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n  width: 100%;\r\n  bottom: 0;\r\n  left: 0;\r\n  position: absolute;\r\n`;\r\n\r\nconst InsertForm = styled.div`\r\n  background: #f8f9fa;\r\n  padding: 32px;\r\n  padding-bottom: 72px;\r\n  border-bottom-left-radius: 16px;\r\n  border-bottom-right-radius: 16px;\r\n  border-top: 1px solid #e9ecef;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 12px;\r\n  border-radius: 4px;\r\n  border: 1px solid #dee2e6;\r\n  width: 100%;\r\n  outline: none;\r\n  font-size: 18px;\r\n  box-sizing: border-box;\r\n`;\r\nfunction ToDoCreate() {\r\n  const [open, setOpen] = useState(false);\r\n  const onToggle = () => setOpen(!open);\r\n  const dispatch = useToDoDispatch();\r\n  let nextId = useToDoNextId();\r\n\r\n  const onSubmit = (e) => {\r\n    if (e.key === 'Enter') {\r\n      console.log('create');\r\n      console.log(nextId.current);\r\n\r\n      e.preventDefault();\r\n      const todo = { id: nextId.current, text: e.target.value, done: false };\r\n      dispatch({ type: 'CREATE', todo: todo });\r\n      e.target.value = '';\r\n      console.log('created', todo);\r\n      nextId.current = nextId.current + 1;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {open && (\r\n        <InsertFormPositioner>\r\n          <InsertForm>\r\n            <Input\r\n              placeholder=\"할 일을 입력 후, Enter 를 누르세요\"\r\n              autoFocus\r\n              onKeyPress={onSubmit}\r\n            />\r\n          </InsertForm>\r\n        </InsertFormPositioner>\r\n      )}\r\n      <CircleButtton onClick={onToggle} open={open}>\r\n        <MdAdd />\r\n      </CircleButtton>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ToDoCreate;\r\n","import React from 'react';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport ToDoTemplate from './components/ToDoTemplate';\r\nimport ToDoHead from './components/ToDoHead';\r\nimport ToDoList from './components/ToDoList';\r\nimport ToDoCreate from './components/ToDoCreate';\r\nimport { ToDoProvider } from './components/ToDoContext';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    background: #e9ecef;\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <ToDoProvider>\r\n      <GlobalStyle />\r\n      <ToDoTemplate>\r\n        <ToDoHead />\r\n        <ToDoList />\r\n        <ToDoCreate />\r\n      </ToDoTemplate>\r\n    </ToDoProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}